{"version":3,"sources":["SplitText.js","App.js","serviceWorker.js","index.js"],"names":["SplitText","copy","role","children","split","map","char","index","aria-hidden","key","aria-label","defaultProps","App","className","theme","Header","styled","div","props","main","textShadow","shadow","secondary","secondaryShadow","precision","size","color","length","shadows","i","offset","push","join","Boolean","window","location","hostname","match","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAGMA,G,MAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACnBC,EAAWF,EAAKG,MAAM,IAAIC,KAAI,SAACC,EAAMC,GAAP,OAClC,0BAAMC,cAAY,OAAOC,IAAKH,EAAOC,GAClCD,MAIL,OACE,0BAAMI,aAAYT,EAAMC,KAAMA,GAC3BC,KAUPH,EAAUW,aAAe,CACvBT,KAAM,WAGOF,Q,kkCCTAY,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAeC,MAAOA,GACpB,kBAACC,EAAD,KACE,kBAAC,EAAD,CAAWd,KAAK,yBASpBc,EAASC,IAAOC,IAAV,KA2BD,SAAAC,GAAK,OAAIA,EAAMJ,MAAMK,QACf,SAAAD,GAAK,OAAIE,EAAW,IAAM,EAAGF,EAAMJ,MAAMO,WAQ7C,SAAAH,GAAK,OAAIA,EAAMJ,MAAMQ,aACf,SAAAJ,GAAK,OAAIE,EAAW,IAAM,EAAGF,EAAMJ,MAAMS,oBAMzC,SAAAL,GAAK,OAAIE,EAAW,IAAM,EAAG,cAM7B,SAAAF,GAAK,OAAIE,EAAW,IAAM,EAAG,cAM7B,SAAAF,GAAK,OAAIE,EAAW,IAAM,EAAG,cAK1CN,EAAQ,CACZK,KAAM,UACNE,OAAQ,UACRC,UAAW,UACXC,gBAAiB,WAGnB,SAASH,EAAWI,EAAWC,EAAMC,GAInC,IAHA,IAAMC,EAASF,GAAQ,EAAID,GAEvBI,EAAU,GACLC,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChC,IAAMC,EAASN,EAAYK,EAC3BD,EAAQG,KAAR,UAAgBD,EAAhB,cAA4BA,EAA5B,cAAwCJ,IAG1C,OAAOE,EAAQI,OCnFGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6oBCXN,IAAMC,EAAeC,YAAH,KAoClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8cd16e32.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SplitText = ({ copy, role }) => {\n  const children = copy.split(\"\").map((char, index) => (\n    <span aria-hidden=\"true\" key={char + index}>\n      {char}\n    </span>\n  ));\n\n  return (\n    <span aria-label={copy} role={role}>\n      {children}\n    </span>\n  );\n};\n\nSplitText.propTypes = {\n  copy: PropTypes.string.isRequired,\n  role: PropTypes.string\n};\n\nSplitText.defaultProps = {\n  role: \"heading\"\n};\n\nexport default SplitText;\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\n\nimport SplitText from \"./SplitText\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Header>\n          <SplitText copy=\"Wash Your Hands!\" />\n        </Header>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Header = styled.div`\n  @keyframes scatter {\n    0% {\n      top: 0;\n    }\n    50% {\n      top: -10px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n\n  font-size: 10rem;\n  text-transform: uppercase;\n  font-family: \"Archivo Black\", \"Archivo\", sans-serif;\n  font-weight: normal;\n  display: block;\n  width: 666px;\n  max-width: 80vw;\n  min-height: 90px;\n  height: auto;\n  text-align: center;\n  margin: 10rem auto;\n  margin: auto;\n  transform(translateY(50vh));\n\n  color: ${props => props.theme.main};\n  text-shadow: ${props => textShadow(0.25, 6, props.theme.shadow)};\n\n  & span {\n    position: relative;\n    animation: scatter 1.75s infinite;\n  }\n\n  & span:nth-child(2n) {\n    color: ${props => props.theme.secondary};\n    text-shadow: ${props => textShadow(0.25, 6, props.theme.secondaryShadow)};\n    animation-delay: 0.3s;\n  }\n\n  & span:nth-child(3n) {\n    color: #ffd913;\n    text-shadow: ${props => textShadow(0.25, 6, \"#6EC0A9\")};\n    animation-delay: 0.15s;\n  }\n\n  & span:nth-child(5n) {\n    color: #555bff;\n    text-shadow: ${props => textShadow(0.25, 6, \"#E485F8\")};\n    animation-delay: 0.4s;\n  }\n\n  & span:nth-child(7n), & span:nth-child(11n) {\n    color: #ff9c55;\n    text-shadow: ${props => textShadow(0.25, 7, \"#FF5555\")};\n    animation-delay: 0.25s;\n  }\n`;\n\nconst theme = {\n  main: \"#5362F6\",\n  shadow: \"#E485F8\",\n  secondary: \"#ED625C\",\n  secondaryShadow: \"#F2A063\"\n};\n\nfunction textShadow(precision, size, color) {\n  const length = size * (1 / precision);\n\n  let shadows = [];\n  for (let i = 1; i <= length; i++) {\n    const offset = precision * i;\n    shadows.push(`${offset}px ${offset}px ${color}`);\n  }\n\n  return shadows.join();\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n  }\n\n  body {\n    font-size: 8pt;\n    background-color: #E4FFF7;\n    color: white;\n  }\n\n  .App {\n    text-align: center;\n    padding: 2rem;\n    max-width: 1280px;\n    margin: auto;\n    font-size: 10rem;\n    font-weight: 900;\n    display: flex;\n    align-items: center;\n    height: 100vh;\n  }\n\n  @media (max-width: 768px) {\n    .App {\n      padding: 1rem;\n    }\n  }\n\n  @media screen and (prefers-reduced-motion: reduce) {\n    animation: none;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}